apply plugin: 'com.android.application'

apply from: rootProject.file('gradle/check.gradle')

// Manifest version information!
def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

def buildTime = new Date().format("dd-MM-yyyy'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))

android {
    compileSdkVersion 20
    buildToolsVersion "20.0.0"

    jacoco {
        //version = '0.6.2.201302030002'
        version = '0.7.1.201405082137'
    }

    defaultConfig {
        applicationId "be.appfoundry.android.androidarchitecture"
        minSdkVersion 16
        targetSdkVersion 20
        versionCode buildVersionCode(versionMajor, versionMinor, versionPatch, versionBuild)
        versionName buildVersionName(versionMajor, versionMinor, versionPatch)

        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""

        // Espresso test runner
        testInstrumentationRunner "com.google.android.apps.common.testing.testrunner.GoogleInstrumentationTestRunner"
    }

    signingConfigs {
        debug {
            storeFile file(appfoundry_android_debugkey_storefile)
            storePassword appfoundry_android_debugkey_storePassword
            keyAlias appfoundry_android_debugkey_keyAlias
            keyPassword appfoundry_android_debugkey_keyPassword
        }
        release {
            storeFile file(appfoundry_android_releasekey_storefile)
            storePassword appfoundry_android_releasekey_storePassword
            keyAlias appfoundry_android_releasekey_keyAlias
            keyPassword appfoundry_android_releasekey_keyPassword
        }
    }

    buildTypes {
        release {
            runProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            testCoverageEnabled = true
        }

        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix " - DEBUG"
            signingConfig signingConfigs.debug
            testCoverageEnabled = true
        }
    }

  productFlavors {

      dev {
        applicationId "be.appfoundry.android.androidarchitecture.dev"
      }

      prod {
        applicationId "be.appfoundry.android.androidarchitecture"
      }
    }

    lintOptions {
        abortOnError true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    def coreModule = project(':appfoundry-core')
    compile coreModule

    compile rootProject.ext.libraries.timber

    androidTestCompile rootProject.ext.libraries.espresso
    // sub-optimal way of including assertj-android
    compile rootProject.ext.libraries.assertj_android
}

def buildVersionName(versionMajor, versionMinor, versionPatch) {
    return "${versionMajor}.${versionMinor}.${versionPatch}"
}

def buildVersionCode(versionMajor, versionMinor, versionPatch, versionBuild) {
    return versionMajor * 1000 + versionMinor * 100 + versionPatch * 10 + versionBuild
}